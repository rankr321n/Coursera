import { Component, OnInit, Input } from "@angular/core";
import { Dish } from "../shared/dishes";
import { Params, ActivatedRoute } from "@angular/router";
import { Location } from "@angular/common";
import { DishService } from "../services/dish.service";
import { switchMap } from "rxjs/operators";
import { FormGroup, FormBuilder, Validators } from "@angular/forms";
@Component({
  selector: "app-dishdetail",
  templateUrl: "./dishdetail.component.html",
  styleUrls: ["./dishdetail.component.scss"]
})
export class DishdetailComponent implements OnInit {
  dishIds: string[];
  prev: string;
  next: string;
  @Input()
  dish: Dish;
  data: any;

  commentForm: FormGroup;
  currentDate = new Date();
  constructor(
    private dishservice: DishService,
    private route: ActivatedRoute,
    private location: Location,
    private fb: FormBuilder
  ) {}

  formErrors = {
    author: "",
    rating: "",
    comment: ""
  };

  validationMessages = {
    author: {
      required: "Name is required.",
      minlength: "Name must be at least 2 characters long.",
      maxlength: "Name cannot be more than 25 characters long."
    },
    rating: {
      required: "Last Name is required."
    },
    comment: {
      required: "comment is required.",
      minlength: "comment must be at least 2 characters long.",
      maxlength: "comment cannot be more than 25 characters long."
    }
  };
  ngOnInit() {
    this.dishservice
      .getDishIds()
      .subscribe(dishIds => (this.dishIds = dishIds));
    this.route.params
      .pipe(
        switchMap((params: Params) => this.dishservice.getDish(params["id"]))
      )
      .subscribe(dish => {
        this.dish = dish;
        this.setPrevNext(dish.id);
      });

    this.commentForm = this.fb.group({
      author: [
        "",
        [Validators.required, Validators.minLength(2), Validators.maxLength(25)]
      ],
      rating: ["5", [Validators.required]],
      comment: [
        "",
        [Validators.required, Validators.minLength(2), Validators.maxLength(25)]
      ],
      currentDate: [this.currentDate]
    });
    // this.Values();
  }

  setPrevNext(dishId: string) {
    const index = this.dishIds.indexOf(dishId);
    this.prev = this.dishIds[
      (this.dishIds.length + index - 1) % this.dishIds.length
    ];
    this.next = this.dishIds[
      (this.dishIds.length + index + 1) % this.dishIds.length
    ];
  }
  formatLabel(value: number) {
    if (value >= 1) {
      return Math.round(value++);
    }

    return value;
  }
  createForm() {
    this.commentForm.valueChanges.subscribe(data => {
      this.data = data;
    });
    this.onValueChanged();
  }

  onValueChanged(data?: any) {
    if (!this.commentForm) {
      return;
    }
    const form = this.commentForm;
    for (const field in this.formErrors) {
      if (this.formErrors.hasOwnProperty(field)) {
        // clear previous error message (if any)
        this.formErrors[field] = "";
        const control = form.get(field);
        if (control && control.dirty && !control.valid) {
          const messages = this.validationMessages[field];
          for (const key in control.errors) {
            if (control.errors.hasOwnProperty(key)) {
              this.formErrors[field] += messages[key] + " ";
            }
          }
        }
      }
    }
  }
  submit() {
    console.log(this.commentForm.value);
    console.log(this.commentForm.value.currentDate);

    this.dish.comments.push(this.commentForm.value);
  }
}
